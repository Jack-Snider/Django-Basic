장고 install
	명령어 : pip install django

장고 프로젝트 생성
	명령어 : django-admin startproject 프로젝트이름 .

장고 슈퍼유저 생성
	명령어 : python manage.py createsuperuser

장고 서버 실행
	명령어 : python manage.py runserver

가상환경 설정
	1. File → Porject : 프로젝트 이름 → Python Interpreter
	2. 톱니바퀴 클릭 → Add → OK → Apply → OK

app 생성
	1. app을 생성하면 settings.py에서 INSTALLED_APPS에 만든 앱을 등록해준다.
	

model 생성
	1. model을 새로 생성하거나 수정하면 model에 변경사항이 생겼다고 장고에게 알려줘야한다.
	   명령어 : python manage.py makemigrations
	2. 그리고 그 반영사항들을 DB에 등록해야 한다.
	   명령어 : python manage.py migrate

생성한 model을 장고 관리자 웹 페이지에 추가하기
	1. venv폴더 아래 manage.py파일로 이동
	2. 코드추가 : from .models import 모델이름 
	3. 코드추가 : admin.site.register( 모델이름 )



Django Shell 사용하기.
	1. 명령어 : python manage.py shell
	2. from 앱이름.models import 클래스이름( 모델 안에 있는거 )
	3. Post.objects.all() → Post라는 객체로 생성된 모든 오브젝트 출력
	4. Post.objects.first() → Post라는 객체로 생성된 애들중에 첫 번째 오브젝트 
	5. Post.objects.last() → Post라는 객체로 생성된 애들중에 마지막 오브젝트


앱 폴더 안에서 templates 폴더 만들고 view만들 때 주의
	1. 각 앱에 templates 폴더를 만들되 그 하위폴더로 해당 앱의 폴더를
	   만들어서 그 아래 view가 될 파일들을 만들어야 한다.
	   이유는 장고는 templates폴더는 모두 하나로 보기 때문에 그 안에서
           	   .html파일이나 다른 파일들이 겹칠 수 있기 때문이다.
 	   예시로 blog/templates/index.html과 single_pages/templates/index.html
	   과 같이 만들다면 충돌이 발생한다.
	   그래서 blog/templates/blog/index.html과 single_pages/templates/single_pages/index.html
	   과 같은 형식으로 만들어야 한다.

정적파일은 장고에서 static 폴더로 관리한다.
	1) 앱 아래 static 폴더 생성
	2) static 폴더 아래 해당 기능에 대한 이름으로 폴더 생성 ( 예시 : 부트스트랩을 사용할 목적이면 bootstrap )
	3) html파일 doctype html 아래 {% load static %} 작성
	4) 링크를 추가하고싶은 곳에 href="{% static 'blog/bootstrap/bootstrap.min.css' %}" 과 같이 작성
	
CBV 종류 : https://wikidocs.net/9623
CBV - ListView
	1) 장고에서 모델이름_list 형태로 된 템플릿과 자동으로 매칭시켜준다.
	2) html파일에서도 모델이름_list 의 이름으로 불러온 객체를 사용할 수 있다.



==============================================
TDD( Test Driven Development ) : 테스트 주도 개발
1. 테스트 코드 작성
	º 만들고 싶은 기능을 점검할 코드 작성
	º 아직 기능을 구현하지 않았으므로 테스트 결과는 당연히 실패

2. 기능 구현
	º 테스트 코드를 만족시키도록 기능 구현
	º 테스트 통과를 최우선 목표로 작업

3. 리팩토링
	º 기능의 성능을 향상시키거나, 재사용성이 좋거나, 가독성이 좋은 코드로 개선
	º 테스트 코드로 다시 기능을 점검

테스트 주도 개발을 하는 이유
	º 프로그램이 복잡해 질수록, 기능을 추가할 때마다 기능 사이에 상호 연관성이 점점 커짐
	º 새로운 기능을 추가할 때마다 브라우저에서 확인이 어려워짐
	º 문제가 발생했는지 모르고 개발을 하다가, 나중에 수정하려면 쉽게 손을 대기 어려움

Beautifulsoup4 설치
	º 브라우저에 구현한 내용이 제대로 표현되었는지 확인하기 위한 라이브러리
	명령어 : pip install beautifulsoup4
==============================================

장고에서 test.py에서 TDD를 실행할 때 장고는 기존의 DB가 아니라 테스트용 DB를 만들어 실행한다.
( 실제 서비스하는 DB랑은 연결을 안함 )

==============================================

- 모듈화 하고싶은 파일 - // 이 파일에서 이 범위만큼을 빈공간으로 하면됨,( 나중에 끼워넣을 코드 집어넣을 공간 )
블록지정( 모듈화할 때 사용 )
{% block 블록이름 %}
{% endblock %}


- 모듈을 끼워넣고싶은 파일 -
모듈화한 파일 불러오기
{% extends 'blog/base.html' %}

{% block 블록이름 %} // 이 범위안에 있는 코드를 extends한 파일에서 블록이름으로 된 범위안에 집어넣겠다.
끼워넣을 코드
{% endblock %}




	